const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–ª–∏—Ç–≤–∞–º–∏
const prayersDir = path.join(__dirname, '../data/utrennie_molitvy_archive/guide_rich');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –º–æ–ª–∏—Ç–≤—ã
function removeSourcesFromPrayer(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const prayerData = JSON.parse(content);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        delete prayerData.origin_background;
        delete prayerData.scriptural_refs;
        delete prayerData.liturgical_context;
        
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ seasonal_variations –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (prayerData.seasonal_variations) {
            prayerData.seasonal_variations.forEach(variation => {
                if (variation.sources) {
                    delete variation.sources;
                }
            });
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(filePath, JSON.stringify(prayerData, null, 2), 'utf8');
        console.log(`‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: ${path.basename(filePath)}`);
        
        return true;
    } catch (error) {
        console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –º–æ–ª–∏—Ç–≤...\n');
    
    if (!fs.existsSync(prayersDir)) {
        console.error(`‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${prayersDir}`);
        process.exit(1);
    }
    
    const files = fs.readdirSync(prayersDir);
    const jsonFiles = files.filter(file => file.endsWith('.json'));
    
    if (jsonFiles.length === 0) {
        console.log('‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        process.exit(1);
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${jsonFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);
    
    let processedCount = 0;
    let errorCount = 0;
    
    jsonFiles.forEach(file => {
        const filePath = path.join(prayersDir, file);
        const success = removeSourcesFromPrayer(filePath);
        
        if (success) {
            processedCount++;
        } else {
            errorCount++;
        }
    });
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`);
    
    if (errorCount === 0) {
        console.log('\nüéâ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    } else {
        console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
